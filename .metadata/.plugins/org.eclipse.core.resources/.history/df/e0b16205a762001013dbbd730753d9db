<script type="text/javascript">
// /WEB-INF/views/includes/calendar_js.jsp
document.addEventListener('DOMContentLoaded', function() {
    var calendarEl = document.getElementById('calendar');
    var eventModal = new bootstrap.Modal(document.getElementById('eventModal'));
    var eventForm = document.getElementById('eventForm');
    var currentEvent = null; // 현재 선택된/편집 중인 이벤트를 저장하는 변수

    var calendar = new FullCalendar.Calendar(calendarEl, {
        initialView: 'dayGridMonth',
        locale: 'ko', // 한국어 설정
        editable: true, // 이벤트 드래그앤드롭, 크기 조절 가능
        selectable: true, // 날짜 선택으로 새 이벤트 추가 가능
        headerToolbar: {
            left: 'prev,next today',
            center: 'title',
            right: 'dayGridMonth,timeGridWeek,timeGridDay'
        },
        // 백엔드에서 모든 스케줄을 가져올 API 엔드포인트 변경
        events: '/api/schedules',

        // 날짜 클릭 시 새 이벤트 추가 모달 띄우기
        select: function(info) {
            currentEvent = null; // 새로운 이벤트이므로 currentEvent 초기화
            // 모달 필드 초기화
            document.getElementById('eventId').value = ''; // scheduleId
            document.getElementById('eventTitle').value = '';
            // document.getElementById('eventDescription').value = ''; // Schedule 테이블에 description 없음. 제거 또는 비활성화
            document.getElementById('eventStartDate').value = moment(info.startStr).format('YYYY-MM-DDTHH:mm');
            // FullCalendar는 dayClick 시 end가 start와 동일하게 넘어오므로, 종일 이벤트가 아닐 경우 1시간 뒤로 기본 설정
            let defaultEndTime = moment(info.startStr).add(1, 'hours').format('YYYY-MM-DDTHH:mm');
            if (info.allDay) { // 종일 이벤트 선택 시
                document.getElementById('eventEndDate').value = '';
                document.getElementById('eventEndDate').setAttribute('disabled', 'disabled'); // 종일 시 종료일시 비활성화
            } else {
                document.getElementById('eventEndDate').value = info.endStr ? moment(info.endStr).format('YYYY-MM-DDTHH:mm') : defaultEndTime;
                document.getElementById('eventEndDate').removeAttribute('disabled');
            }
            document.getElementById('allDayEvent').checked = info.allDay;
            // document.getElementById('eventColor').value = '#007bff'; // Schedule 테이블에 color 필드 없으므로 UI 기본값으로 사용 안함

            // Schedule 테이블의 location, isRecurring 필드 초기화
            document.getElementById('eventLocation').value = '';
            document.getElementById('isRecurringEvent').checked = false; // 기본값 false

            document.getElementById('eventModalLabel').innerText = '새 일정 추가';
            document.getElementById('deleteEventBtn').style.display = 'none'; // 새 일정 추가 시 삭제 버튼 숨김

            eventModal.show();
        },

        // 기존 이벤트 클릭 시 상세/수정 모달 띄우기
        eventClick: function(info) {
            currentEvent = info.event; // 현재 선택된 이벤트 저장

            document.getElementById('eventId').value = info.event.id; // scheduleId
            document.getElementById('eventTitle').value = info.event.title;
            // document.getElementById('eventDescription').value = info.event.extendedProps.description || ''; // Schedule 테이블에 description 없음
            document.getElementById('eventStartDate').value = moment(info.event.start).format('YYYY-MM-DDTHH:mm');
            document.getElementById('eventEndDate').value = info.event.end ? moment(info.event.end).format('YYYY-MM-DDTHH:mm') : '';
            document.getElementById('allDayEvent').checked = info.event.allDay;

            // 종일 체크박스 상태에 따라 종료일시 입력 필드 활성화/비활성화
            if (info.event.allDay) {
                document.getElementById('eventEndDate').setAttribute('disabled', 'disabled');
            } else {
                document.getElementById('eventEndDate').removeAttribute('disabled');
            }

            // document.getElementById('eventColor').value = info.event.backgroundColor || '#007bff'; // Schedule 테이블에 color 필드 없으므로 UI 색상 고정

            // Schedule 테이블의 추가 필드 매핑
            document.getElementById('eventLocation').value = info.event.extendedProps.location || '';
            document.getElementById('isRecurringEvent').checked = info.event.extendedProps.isRecurring;

            document.getElementById('eventModalLabel').innerText = '일정 상세/수정';
            document.getElementById('deleteEventBtn').style.display = 'inline-block'; // 기존 일정 시 삭제 버튼 보임

            eventModal.show();
        },

        // 이벤트 드래그앤드롭 시 호출 (시간/날짜 변경)
        eventDrop: function(info) {
            updateScheduleOnServer(info.event);
        },

        // 이벤트 리사이즈 시 호출 (기간 변경)
        eventResize: function(info) {
            updateScheduleOnServer(info.event);
        }
    });

    calendar.render();

    // --- 모달 버튼 및 폼 처리 ---

    // '저장' 버튼 클릭 시
    document.getElementById('saveEventBtn').addEventListener('click', function() {
        var scheduleId = document.getElementById('eventId').value;
        var title = document.getElementById('eventTitle').value;
        var startTime = document.getElementById('eventStartDate').value;
        var endTime = document.getElementById('eventEndDate').value;
        var allDay = document.getElementById('allDayEvent').checked;

        // Schedule 테이블의 추가 필드 값 가져오기
        var location = document.getElementById('eventLocation').value;
        var isRecurring = document.getElementById('isRecurringEvent').checked ? "Y" : "N";
        var userId = document.getElementById('eventUserId').value; // 숨겨진 필드에서 userId 가져옴

        if (!title) {
            alert('제목을 입력해주세요.');
            return;
        }
        if (!startTime) {
            alert('시작일시를 입력해주세요.');
            return;
        }

        // 종일 이벤트인 경우 endTime을 null로 설정
        if (allDay) {
            endTime = null;
        }

        var scheduleData = {
            scheduleId: scheduleId, // 수정 시 필요
            userId: userId,
            title: title,
            startTime: startTime,
            endTime: endTime,
            location: location,
            isRecurring: isRecurring // 'Y' 또는 'N' 문자열
        };

        if (scheduleId) { // 기존 스케줄 수정
            $.ajax({
                url: '/api/schedules', // POST로 id를 포함하여 보내면 기존 스케줄 업데이트
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(scheduleData),
                success: function(response) {
                    // FullCalendar 이벤트 업데이트 (서버 응답 기반)
                    currentEvent.setProp('title', response.title);
                    currentEvent.setDates(response.start, response.end);
                    currentEvent.setProp('allDay', response.allDay);
                    currentEvent.setExtendedProp('location', response.extendedProps.location);
                    currentEvent.setExtendedProp('isRecurring', response.extendedProps.isRecurring);
                    currentEvent.setExtendedProp('userId', response.extendedProps.userId);
                    currentEvent.setProp('backgroundColor', response.backgroundColor); // UI 색상도 업데이트
                    currentEvent.setProp('borderColor', response.borderColor);
                    calendar.refetchEvents(); // FullCalendar 데이터 새로고침
                    eventModal.hide();
                    alert('일정이 성공적으로 수정되었습니다.');
                },
                error: function(xhr, status, error) {
                    console.error('일정 수정 실패:', error);
                    alert('일정 수정에 실패했습니다.');
                }
            });
        } else { // 새 스케줄 추가
            $.ajax({
                url: '/api/schedules',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(scheduleData),
                success: function(response) {
                    // 서버에서 저장된 이벤트의 ID를 받아와 FullCalendar에 추가
                    calendar.addEvent({
                        id: response.id, // 서버에서 생성된 scheduleId
                        title: response.title,
                        start: response.start,
                        end: response.end,
                        allDay: response.allDay,
                        backgroundColor: response.backgroundColor,
                        borderColor: response.borderColor,
                        extendedProps: {
                            location: response.extendedProps.location,
                            isRecurring: response.extendedProps.isRecurring,
                            userId: response.extendedProps.userId
                        }
                    });
                    eventModal.hide();
                    alert('새 일정이 성공적으로 추가되었습니다.');
                },
                error: function(xhr, status, error) {
                    console.error('새 일정 추가 실패:', error);
                    alert('새 일정 추가에 실패했습니다.');
                }
            });
        }
    });

    // '삭제' 버튼 클릭 시
    document.getElementById('deleteEventBtn').addEventListener('click', function() {
        var scheduleId = document.getElementById('eventId').value;
        if (confirm('이 일정을 삭제하시겠습니까?')) {
            $.ajax({
                url: '/api/schedules/' + scheduleId, // DELETE 요청 엔드포인트 변경
                type: 'DELETE',
                success: function(response) {
                    if (currentEvent) {
                        currentEvent.remove(); // 캘린더에서 이벤트 제거
                    }
                    eventModal.hide();
                    alert('일정이 성공적으로 삭제되었습니다.');
                },
                error: function(xhr, status, error) {
                    console.error('일정 삭제 실패:', error);
                    alert('일정 삭제에 실패했습니다.');
                }
            });
        }
    });

    // 이벤트 드래그/리사이즈 후 서버에 업데이트 요청
    function updateScheduleOnServer(event) {
        // userId는 currentEvent.extendedProps에서 가져오거나, 실제 로그인된 유저 ID를 사용
        var userIdToUpdate = event.extendedProps.userId || document.getElementById('eventUserId').value;

        var scheduleData = {
            scheduleId: event.id,
            userId: userIdToUpdate,
            title: event.title,
            startTime: moment(event.start).format('YYYY-MM-DDTHH:mm'),
            endTime: event.end ? moment(event.end).format('YYYY-MM-DDTHH:mm') : null, // 종일 이벤트인 경우 null로 설정
            allDay: event.allDay, // allDay 여부
            location: event.extendedProps.location || "", // extendedProps에서 location 가져오기
            isRecurring: event.extendedProps.isRecurring ? "Y" : "N" // extendedProps에서 isRecurring 가져오기
        };

        $.ajax({
            url: '/api/schedules',
            type: 'POST', // POST로 업데이트
            contentType: 'application/json',
            data: JSON.stringify(scheduleData),
            success: function(response) {
                console.log('일정 업데이트 성공:', response);
            },
            error: function(xhr, status, error) {
                console.error('일정 업데이트 실패:', error);
                alert('일정 업데이트에 실패했습니다. 페이지를 새로고침 해주세요.');
                calendar.refetchEvents(); // 실패 시 캘린더를 원래 상태로 되돌림
            }
        });
    }

    // 종일 체크박스 상태에 따라 종료일시 입력 필드 활성화/비활성화
    document.getElementById('allDayEvent').addEventListener('change', function() {
        var endDateInput = document.getElementById('eventEndDate');
        if (this.checked) {
            endDateInput.setAttribute('disabled', 'disabled');
            endDateInput.value = ''; // 종일 선택 시 종료일시 초기화
        } else {
            endDateInput.removeAttribute('disabled');
            // 종일 해제 시 시작 일시로부터 1시간 뒤를 기본 종료 시간으로 설정
            if (!endDateInput.value && document.getElementById('eventStartDate').value) {
                 endDateInput.value = moment(document.getElementById('eventStartDate').value).add(1, 'hours').format('YYYY-MM-DDTHH:mm');
            }
        }
    });

    // 모달이 닫힐 때 폼 초기화 (선택 사항)
    document.getElementById('eventModal').addEventListener('hidden.bs.modal', function () {
        eventForm.reset(); // 폼 필드 초기화
        document.getElementById('deleteEventBtn').style.display = 'none'; // 삭제 버튼 다시 숨김
        document.getElementById('eventEndDate').removeAttribute('disabled'); // 종료일시 다시 활성화
        // UI에서 제거했거나 사용하지 않는 필드 초기화 로직도 제거
        // document.getElementById('eventDescription').value = '';
        // document.getElementById('eventColor').value = '#007bff';
    });

});
</script>