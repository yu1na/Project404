package com.pj.springboot.calendar;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional; // 트랜잭션 관리

import java.util.List;
import java.util.Optional; // findById 반환 타입

@Service
public class CalendarService {

    @Autowired
    private ScheduleRepository calendarEventRepository;

    public List<CalendarEvent> getAllEvents() {
        return calendarEventRepository.findAll();
    }

    @Transactional
    public CalendarEvent addEvent(CalendarEvent event) {
        return calendarEventRepository.save(event); // 새 이벤트 저장 (ID는 DB에서 자동 생성)
    }

    @Transactional
    public CalendarEvent updateEvent(Long id, CalendarEvent updatedEvent) {
        Optional<CalendarEvent> existingEventOpt = calendarEventRepository.findById(id);

        if (existingEventOpt.isPresent()) {
            CalendarEvent existingEvent = existingEventOpt.get();
            // 필드 업데이트
            existingEvent.setTitle(updatedEvent.getTitle());
            existingEvent.setStart(updatedEvent.getStart());
            existingEvent.setEnd(updatedEvent.getEnd());
            existingEvent.setAllDay(updatedEvent.isAllDay());
            existingEvent.setColor(updatedEvent.getColor());
            existingEvent.setDescription(updatedEvent.getDescription());
            return calendarEventRepository.save(existingEvent); // 업데이트된 엔티티 저장
        }
        return null; // 해당 ID의 이벤트가 없을 경우
    }

    @Transactional
    public boolean deleteEvent(Long id) {
        if (calendarEventRepository.existsById(id)) {
            calendarEventRepository.deleteById(id);
            return true;
        }
        return false; // 해당 ID의 이벤트가 없을 경우
    }

    // ID로 단일 이벤트 조회 (필요하다면 추가)
    public Optional<CalendarEvent> getEventById(Long id) {
        return calendarEventRepository.findById(id);
    }
}