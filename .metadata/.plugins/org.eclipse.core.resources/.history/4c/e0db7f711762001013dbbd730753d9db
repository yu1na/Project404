<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%-- calendar.jsp는 base.jsp에 의해 포함될 것이므로, 여기서는 HTML 구조 태그를 사용하지 않습니다. --%>

    <h2>📅 일정 관리</h2>
    <div id="calendar"></div>

    <%-- 이벤트 추가/수정 모달 (이 부분은 calendar.jsp에 그대로 둡니다) --%>
    <div class="modal fade" id="eventModal" tabindex="-1" aria-labelledby="eventModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="eventModalLabel">일정 상세/수정</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="eventForm">
              <input type="hidden" id="eventId">
              <div class="mb-3">
                <label for="eventTitle" class="form-label">제목</label>
                <input type="text" class="form-control" id="eventTitle" required>
              </div>
              <div class="mb-3">
                <label for="eventDescription" class="form-label">설명/비고</label>
                <textarea class="form-control" id="eventDescription" rows="3"></textarea>
              </div>
              <div class="mb-3">
                <label for="eventStart" class="form-label">시작일시</label>
                <input type="datetime-local" class="form-control" id="eventStart" required>
              </div>
              <div class="mb-3">
                <label for="eventEnd" class="form-label">종료일시</label>
                <input type="datetime-local" class="form-control" id="eventEnd">
              </div>
              <div class="mb-3 form-check">
                <input type="checkbox" class="form-check-input" id="eventAllDay">
                <label class="form-check-label" for="eventAllDay">종일</label>
              </div>
              <div class="mb-3">
                <label for="eventColor" class="form-label">색상</label>
                <input type="color" class="form-control form-control-color" id="eventColor" value="#007bff">
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-danger me-auto" id="deleteEventBtn">삭제</button>
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
            <button type="button" class="btn btn-primary" id="saveEventBtn">저장</button>
          </div>
        </div>
      </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var calendarEl = document.getElementById('calendar');
            var eventModal = new bootstrap.Modal(document.getElementById('eventModal'));

            var calendar = new FullCalendar.Calendar(calendarEl, {
                locale: 'ko', // 한국어 적용
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,timeGridDay'
                },
                initialView: 'dayGridMonth',
                editable: true,
                selectable: true,
                dayMaxEvents: true,
                eventLimit: true,

                // 이벤트 데이터 로드
                events: function(fetchInfo, successCallback, failureCallback) {
                    $.ajax({
                        url: '/calendar/events', // CalendarController의 getCalendarEvents 매핑
                        method: 'GET',
                        dataType: 'json',
                        success: function(data) {
                            successCallback(data);
                        },
                        error: function(xhr, status, error) {
                            console.error("이벤트 로드 실패: ", status, error);
                            alert("이벤트 로드에 실패했습니다.");
                            failureCallback(error);
                        }
                    });
                },

                // 날짜 클릭 시 이벤트 추가
                select: function(info) {
                    $('#eventId').val(''); // ID 초기화 (새 이벤트)
                    $('#eventTitle').val('');
                    $('#eventDescription').val('');
                    $('#eventStart').val(moment(info.startStr).format('YYYY-MM-DDTHH:mm'));
                    $('#eventEnd').val(moment(info.endStr).format('YYYY-MM-DDTHH:mm'));
                    $('#eventAllDay').prop('checked', info.allDay);
                    $('#eventColor').val('#007bff');
                    $('#deleteEventBtn').hide(); // 새 이벤트 추가 시 삭제 버튼 숨김

                    eventModal.show();
                },

                // 이벤트 클릭 시 상세/수정
                eventClick: function(info) {
                    var event = info.event;
                    $('#eventId').val(event.id);
                    $('#eventTitle').val(event.title);
                    $('#eventDescription').val(event.extendedProps.description || '');
                    $('#eventStart').val(moment(event.start).format('YYYY-MM-DDTHH:mm'));
                    $('#eventEnd').val(event.end ? moment(event.end).format('YYYY-MM-DDTHH:mm') : '');
                    $('#eventAllDay').prop('checked', event.allDay);
                    $('#eventColor').val(event.backgroundColor || '#007bff');
                    $('#deleteEventBtn').show(); // 기존 이벤트는 삭제 버튼 보임

                    eventModal.show();
                },

                // 이벤트 드래그 후 날짜 변경
                eventDrop: function(info) {
                    var event = info.event;
                    var updatedEvent = {
                        id: event.id,
                        title: event.title,
                        start: moment(event.start).format('YYYY-MM-DDTHH:mm:ss'),
                        end: event.end ? moment(event.end).format('YYYY-MM-DDTHH:mm:ss') : null,
                        allDay: event.allDay,
                        color: event.backgroundColor,
                        description: event.extendedProps.description || ''
                    };
                    updateEvent(updatedEvent, info.revert);
                },

                // 이벤트 리사이즈 후 기간 변경
                eventResize: function(info) {
                    var event = info.event;
                    var updatedEvent = {
                        id: event.id,
                        title: event.title,
                        start: moment(event.start).format('YYYY-MM-DDTHH:mm:ss'),
                        end: event.end ? moment(event.end).format('YYYY-MM-DDTHH:mm:ss') : null,
                        allDay: event.allDay,
                        color: event.backgroundColor,
                        description: event.extendedProps.description || ''
                    };
                    updateEvent(updatedEvent, info.revert);
                }
            });

            calendar.render(); // 캘린더 그리기

            // 저장 버튼 클릭 시
            $('#saveEventBtn').on('click', function() {
                var eventId = $('#eventId').val();
                var eventData = {
                    title: $('#eventTitle').val(),
                    description: $('#eventDescription').val(),
                    start: moment($('#eventStart').val()).format('YYYY-MM-DDTHH:mm:ss'),
                    end: $('#eventEnd').val() ? moment($('#eventEnd').val()).format('YYYY-MM-DDTHH:mm:ss') : null,
                    allDay: $('#eventAllDay').is(':checked'),
                    color: $('#eventColor').val()
                };

                if (eventId) { // 기존 이벤트 수정
                    updateEvent(Object.assign({id: Number(eventId)}, eventData));
                } else { // 새 이벤트 추가
                    addEvent(eventData);
                }
                eventModal.hide();
            });

            // 삭제 버튼 클릭 시
            $('#deleteEventBtn').on('click', function() {
                if (confirm('이 일정을 삭제하시겠습니까?')) {
                    var eventId = $('#eventId').val();
                    deleteEvent(Number(eventId));
                    eventModal.hide();
                }
            });

            // --- API 연동 함수들 ---
            function addEvent(eventData) {
                $.ajax({
                    url: '/calendar/events',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(eventData),
                    success: function(response) {
                        calendar.addEvent(response);
                        alert('일정이 추가되었습니다.');
                    },
                    error: function(xhr, status, error) {
                        console.error("이벤트 추가 실패: ", status, error);
                        alert("일정 추가에 실패했습니다.");
                    }
                });
            }

            function updateEvent(eventData, revertFunc) {
                $.ajax({
                    url: '/calendar/events/' + eventData.id,
                    method: 'PUT',
                    contentType: 'application/json',
                    data: JSON.stringify(eventData),
                    success: function(response) {
                        alert('일정이 수정되었습니다.');
                    },
                    error: function(xhr, status, error) {
                        console.error("이벤트 수정 실패: ", status, error);
                        alert("일정 수정에 실패했습니다.");
                        if (revertFunc) revertFunc();
                    }
                });
            }

            function deleteEvent(eventId) {
                $.ajax({
                    url: '/calendar/events/' + eventId,
                    method: 'DELETE',
                    success: function() {
                        calendar.getEventById(eventId).remove();
                        alert('일정이 삭제되었습니다.');
                    },
                    error: function(xhr, status, error) {
                        console.error("이벤트 삭제 실패: ", status, error);
                        alert("일정 삭제에 실패했습니다.");
                    }
                });
            }
        });
    </script>