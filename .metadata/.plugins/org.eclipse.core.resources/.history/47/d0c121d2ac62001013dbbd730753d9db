// Package Name: com.pj.springboot.calendar
package com.pj.springboot.calendar;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Controller
@RequestMapping
public class CalendarController {

    @Autowired
    private ScheduleService scheduleService;

    // 캘린더 페이지를 보여주는 요청 처리
    @GetMapping("/calendar")
    public String showCalendarPage() {
        return "calendar/calendar";
    }

    // 모든 스케줄 조회 (FullCalendar가 초기 로드 시 사용)
    @GetMapping("/api/schedules")
    @ResponseBody
    public ResponseEntity<List<Object>> getAllSchedules() {
        List<Schedule> schedules = scheduleService.findAllSchedules();
        List<Object> fcEvents = schedules.stream().map(schedule -> new Object() {
            public Long id = schedule.getScheduleId();
            public String title = schedule.getTitle();
            public String start = schedule.getStartTime().toString();
            public String end = schedule.getEndTime() != null ? schedule.getEndTime().toString() : null;
            public boolean allDay = schedule.getEndTime() == null && schedule.getStartTime().toLocalTime().equals(java.time.LocalTime.MIDNIGHT) && !schedule.getIsRecurringBoolean();
            public String backgroundColor = "#2ecc71";
            public String borderColor = "#2ecc71";
            public Object extendedProps = new Object() {
                public String description = null;
                public String location = schedule.getLocation();
                public boolean isRecurring = schedule.getIsRecurringBoolean();
                public String userId = schedule.getUserId();
            };
        }).collect(Collectors.toList());
        return new ResponseEntity<>(fcEvents, HttpStatus.OK);
    }

    // 스케줄 생성 또는 업데이트
    @PostMapping("/api/schedules")
    @ResponseBody
    public ResponseEntity<Object> saveSchedule(@RequestBody Schedule schedule) {
        // 새 일정 추가 시 ID를 null로 설정하여 JPA가 시퀀스를 사용하도록 함
        if (schedule.getScheduleId() == null || schedule.getScheduleId() == 0) {
            schedule.setScheduleId(null);
        }

        Schedule savedSchedule = scheduleService.saveSchedule(schedule);

        Object fcEvent = new Object() {
            public Long id = savedSchedule.getScheduleId();
            public String title = savedSchedule.getTitle();
            public String start = savedSchedule.getStartTime().toString();
            public String end = savedSchedule.getEndTime() != null ? savedSchedule.getEndTime().toString() : null;
            public boolean allDay = savedSchedule.getEndTime() == null && savedSchedule.getStartTime().toLocalTime().equals(java.time.LocalTime.MIDNIGHT) && !savedSchedule.getIsRecurringBoolean();
            public String backgroundColor = "#2ecc71";
            public String borderColor = "#2ecc71";
            public Object extendedProps = new Object() {
                public String description = null;
                public String location = savedSchedule.getLocation();
                public boolean isRecurring = savedSchedule.getIsRecurringBoolean();
                public String userId = savedSchedule.getUserId();
            };
        };
        return new ResponseEntity<>(fcEvent, HttpStatus.CREATED);
    }

    // 스케줄 삭제
    @DeleteMapping("/api/schedules/{id}")
    @ResponseBody
    public ResponseEntity<Void> deleteSchedule(@PathVariable Long id) {
        scheduleService.deleteSchedule(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
}