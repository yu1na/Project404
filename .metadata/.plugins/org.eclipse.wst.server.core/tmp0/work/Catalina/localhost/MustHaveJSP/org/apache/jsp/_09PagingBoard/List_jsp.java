/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.40
 * Generated at: 2025-05-12 03:53:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._09PagingBoard;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import utils.BoardPage;
import org.apache.catalina.loader.WebappLoader;
import model1.board.BoardDTO;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import model1.board.BoardDAO;

public final class List_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(10);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.apache.catalina.loader.WebappLoader");
    _jspx_imports_classes.add("model1.board.BoardDTO");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("model1.board.BoardDAO");
    _jspx_imports_classes.add("utils.BoardPage");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

//DB연결 및 CRUD작업을 위한 DAO객체를 생성한다.
BoardDAO dao =  new BoardDAO(application);

/*
검색어가 있는 경우 클라이언트가 선택한 필드명과 검색어를 저장할 
Map컬렉션을 생성한다.
*/
Map<String, Object> param = new HashMap<String, Object>();
/*
검색폼에서 입력한 검색어와 필드명을 파라미터로 받아온다.
해당 <form>의 전송방식은 get, action속성은 없는 상태이므로
현재 페이지로 폼값이 전송된다.
*/
String searchField = request.getParameter("searchField");
String searchWord = request.getParameter("searchWord");

//사용자가 입력한 검색어가 있다면...
if(searchWord != null)
{
	/* Map컬렉션에 컬럼명과 검색어를 추가한다. */
	param.put("searchField", searchField);
	param.put("searchWord", searchWord);
}
//Map콜렉션을 인수로 게시물의 갯수를 카운트한다.
int totalCount = dao.selectCount(param);

int pageSize = Integer.parseInt(application.getInitParameter("POSTS_PER_PAGE"));
int blockPage = Integer.parseInt(application.getInitParameter("PAGES_PER_BLOCK"));

int totalPage = (int)Math.ceil((double)totalCount / pageSize);

int pageNum = 1;
String pageTemp = request.getParameter("pageNum");
if(pageTemp != null && !pageTemp.equals(""))
	pageNum = Integer.parseInt(pageTemp);

int start = (pageNum -1) * pageSize +1;
int end = pageNum + pageSize;
param.put("start", start);
param.put("end", end);
//목록에 출력할 게시물을 추출하여 반환받는다.
List<BoardDTO> boardLists = dao.selectList(param);
//자원해제
dao.close();

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("	<head>\r\n");
      out.write("		<meta charset=\"UTF-8\">\r\n");
      out.write("		<title>회원제 게시판</title>\r\n");
      out.write("	</head>\r\n");
      out.write("	<body>\r\n");
      out.write("		<!-- 공통 링크 -->\r\n");
      out.write("	    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../Common/Link.jsp", out, false);
      out.write("  \r\n");
      out.write("	    \r\n");
      out.write("	\r\n");
      out.write("	    <h2>목록 보기(List) - 현재 페이지 : ");
      out.print( pageNum );
      out.write(" (전체 : ");
      out.print( totalPage );
      out.write(")</h2>\r\n");
      out.write("	    <!-- 검색 폼 -->\r\n");
      out.write("	    <!--  전송은 get 방식이고， action 속성을 지정하지 않았으므로 \r\n");
      out.write("    	submit하면 폼값이 현재 페이지로 전송된다. -->\r\n");
      out.write("	    <form method=\"get\">  \r\n");
      out.write("	    <table border=\"1\" width=\"90%\">\r\n");
      out.write("	    <tr>\r\n");
      out.write("	        <td align=\"center\">\r\n");
      out.write("	        	<!-- 검색 항목(searchField)은 제목과 내용 중 선택 -->\r\n");
      out.write("	            <select name=\"searchField\"> \r\n");
      out.write("	                <option value=\"title\">제목</option> \r\n");
      out.write("	                <option value=\"content\">내용</option>\r\n");
      out.write("	            </select>\r\n");
      out.write("	            <input type=\"text\" name=\"searchWord\" />\r\n");
      out.write("	            <input type=\"submit\" value=\"검색하기\" />\r\n");
      out.write("	        </td>\r\n");
      out.write("	    </tr>   \r\n");
      out.write("	    </table>\r\n");
      out.write("	    </form>\r\n");
      out.write("	    <!-- 게시물 목록 테이블(표) -->\r\n");
      out.write("	    <table border=\"1\" width=\"90%\">\r\n");
      out.write("	    	<!-- 각 컬럼의 이름 -->\r\n");
      out.write("	        <tr>\r\n");
      out.write("	            <th width=\"10%\">번호</th>\r\n");
      out.write("	            <th width=\"50%\">제목</th>\r\n");
      out.write("	            <th width=\"15%\">작성자</th>\r\n");
      out.write("	            <th width=\"10%\">조회수</th>\r\n");
      out.write("	            <th width=\"15%\">작성일</th>\r\n");
      out.write("	        </tr>\r\n");
      out.write("	");

	if (boardLists.isEmpty()) {
	
      out.write("\r\n");
      out.write("	        <tr>\r\n");
      out.write("	            <td colspan=\"5\" align=\"center\">\r\n");
      out.write("	                등록된 게시물이 없습니다^^*\r\n");
      out.write("	            </td>\r\n");
      out.write("	        </tr>\r\n");
      out.write("	");

	}
	else {
		// 출력할 게시물이 있는 경우에는 확장 for문으로 List컬랙션에
		// 저장된 데이터의 갯수만큼 반복하여 출력한다.
	    int virtualNum = 0; 
		int countNum = 0;
	    for (BoardDTO dto : boardLists)
	    {
	    	// 현재 출력할 게시물의 갯수에 따라 출력번호는 달라지므로
	    	// totalCount를 사용하여 가상번호를 부여한다.
	      /*   virtualNum = totalCount--;  */  
	      virtualNum = totalCount - (((pageNum -1) * pageSize) + countNum++);
	
      out.write("\r\n");
      out.write("	        <tr align=\"center\">\r\n");
      out.write("	        	<!-- 게시물의 가상 번호 -->\r\n");
      out.write("	            <td>");
      out.print( virtualNum );
      out.write("</td>  \r\n");
      out.write("	            <td align=\"left\"> \r\n");
      out.write("	            	<!--  게시물의 일련번호가 매개변수로 전달 -->\r\n");
      out.write("	                <a href=\"View.jsp?num=");
      out.print( dto.getNum() );
      out.write('"');
      out.write('>');
      out.print( dto.getTitle() );
      out.write("</a> \r\n");
      out.write("	            </td>\r\n");
      out.write("	            <!-- 작성자 아이디 -->\r\n");
      out.write("	            <td align=\"center\">");
      out.print( dto.getId() );
      out.write("</td>     \r\n");
      out.write("	            <!-- 조회수 -->       \r\n");
      out.write("	            <td align=\"center\">");
      out.print( dto.getVisitcount() );
      out.write("</td>   \r\n");
      out.write("	            <!-- 작성일 --> \r\n");
      out.write("	            <td align=\"center\">");
      out.print( dto.getPostdate() );
      out.write("</td>    \r\n");
      out.write("	        </tr>\r\n");
      out.write("	");

	    }
	}
	
      out.write("\r\n");
      out.write("	    </table>\r\n");
      out.write("	   \r\n");
      out.write("	    <table border=\"1\" width=\"90%\">\r\n");
      out.write("	        <tr align=\"right\">\r\n");
      out.write("	        	<td align=\"center\">\r\n");
      out.write("	        	");
      out.print( BoardPage.pagingStr(totalCount, pageSize,
	        				blockPage, pageNum, request.getRequestURI())
	        	);
      out.write("\r\n");
      out.write("	        	</td>\r\n");
      out.write("	            <td><button type=\"button\" onclick=\"location.href='Write.jsp';\">글쓰기\r\n");
      out.write("	                </button></td>\r\n");
      out.write("	        </tr>\r\n");
      out.write("	    </table>\r\n");
      out.write("	</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
