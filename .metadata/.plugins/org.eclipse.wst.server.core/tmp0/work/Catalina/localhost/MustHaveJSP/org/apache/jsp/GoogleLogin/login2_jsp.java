/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.40
 * Generated at: 2025-05-19 03:36:20 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.GoogleLogin;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class login2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("   <head>\r\n");
      out.write("   <meta charset=\"UTF-8\">\r\n");
      out.write("   <title>Google login #1</title>\r\n");
      out.write("   <script src=\"https://accounts.google.com/gsi/client\" async></script>\r\n");
      out.write("   <script src=\"https://cdn.jsdelivr.net/npm/jwt-decode@latest/build/jwt-decode.min.js\"></script>\r\n");
      out.write("    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\r\n");
      out.write("    <script>\r\n");
      out.write("    window.onload = function () {\r\n");
      out.write("        google.accounts.id.initialize({\r\n");
      out.write("            client_id: \"959287292953-c6tugq4citmsug3jt2g00q7u8qf1ohh6.apps.googleusercontent.com\",\r\n");
      out.write("            callback: handleCredentialResponse\r\n");
      out.write("        });\r\n");
      out.write("        \r\n");
      out.write("        google.accounts.id.renderButton(\r\n");
      out.write("            document.getElementById(\"buttonDiv\"),\r\n");
      out.write("            { theme: \"outline\", size: \"signin\", width: 250 }\r\n");
      out.write("        );\r\n");
      out.write("       //google.accounts.id.prompt();\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function handleCredentialResponse(response) {\r\n");
      out.write("        var profile = jwt_decode(response.credential);\r\n");
      out.write("        console.log(\"ID: \" + profile.sub);\r\n");
      out.write("        console.log('Name: ' + profile.name);\r\n");
      out.write("        console.log(\"Image URL: \" + profile.picture);\r\n");
      out.write("        console.log(\"Email: \" + profile.email);    \r\n");
      out.write("      \r\n");
      out.write("        $('#login').css('display', 'none');\r\n");
      out.write("        $('#logout').css('display', 'block');\r\n");
      out.write("        $('#upick').attr('src', profile.picture);\r\n");
      out.write("        $('#uname').html('[ ' +profile.name + ' ]');\r\n");
      out.write("    }\r\n");
      out.write("    function signOut() {\r\n");
      out.write("        google.accounts.id.disableAutoSelect();\r\n");
      out.write("       \r\n");
      out.write("        $('#login').css('display', 'block');\r\n");
      out.write("        $('#logout').css('display', 'none');\r\n");
      out.write("        $('#upick').attr('src', '');\r\n");
      out.write("        $('#uname').html('');\r\n");
      out.write("    }\r\n");
      out.write("    </script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div id=\"login\">\r\n");
      out.write("    <div id=\"buttonDiv\"></div> \r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div id=\"logout\" style=\"display: none;\">\r\n");
      out.write("    <input type=\"button\" onclick=\"signOut();\" value=\"로그아웃\" /><br>\r\n");
      out.write("\r\n");
      out.write("    <img id=\"upick\" src=\"\"><br>\r\n");
      out.write("    <span id=\"uname\"></span>\r\n");
      out.write("</div>\r\n");
      out.write("   \r\n");
      out.write("   </body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
